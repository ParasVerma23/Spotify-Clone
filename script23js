const fs = require('fs');
const { promisify } = require('util');
const exec = promisify(require('child_process').exec);
const fetch = require('node-fetch');
const { JSDOM } = require('jsdom');
const player = require('play-sound')();

async function getSongs(file) {
    const response = await fetch(`http://127.0.0.1:5500/${file}/`);
    const html = await response.text();
    const dom = new JSDOM(html);
    const links = Array.from(dom.window.document.querySelectorAll('a'));

    const songs = links
        .filter(link => link.href.endsWith('.mp3'))
        .map(link => link.href.split(`/${file}/`)[1]);

    return songs;
}

async function playMusic(track) {
    const filePath = `/${currFolder}/${track}`;
    player.play(filePath, (err) => {
        if (err) {
            console.error(`Failed to play ${filePath}:`, err);
        }
    });
}

async function displayAlbums() {
    const response = await fetch(`/folder/`);
    const html = await response.text();
    const dom = new JSDOM(html);
    const links = Array.from(dom.window.document.querySelectorAll('a'));

    for (const link of links) {
        const href = link.href;
        if (href.includes('/songs') && !href.includes('.htaccess')) {
            const folder = href.split('/').slice(-2)[0];
            console.log(`Folder: ${folder}`);
            const infoResponse = await fetch(`/folder/${folder}/info.json`);
            const info = await infoResponse.json();
            console.log('Title:', info.title);
            console.log('Description:', info.description);
            console.log('Playlist Icon:', info.playlistIcon); // Assuming playlist icon URL is provided in info.json
        }
    }
}

async function main() {
    const currFolder = "folder/ncs";
    const songs = await getSongs(currFolder);
    if (songs.length > 0) {
        await playMusic(songs[0]);
    } else {
        console.log("No songs found.");
    }
    await displayAlbums();
}

main().catch(err => console.error(err));
